head	1.13;
access;
symbols;
locks
	nakashim:1.13; strict;
comment	@ * @;


1.13
date	2017.04.21.03.28.45;	author nakashim;	state Exp;
branches;
next	1.12;

1.12
date	2015.09.01.09.42.25;	author nakashim;	state Exp;
branches;
next	1.11;

1.11
date	2015.09.01.09.32.28;	author nakashim;	state Exp;
branches;
next	1.10;

1.10
date	2015.09.01.08.04.13;	author nakashim;	state Exp;
branches;
next	1.9;

1.9
date	2015.09.01.05.35.09;	author nakashim;	state Exp;
branches;
next	1.8;

1.8
date	2015.08.29.14.21.33;	author nakashim;	state Exp;
branches;
next	1.7;

1.7
date	2015.08.27.06.47.08;	author nakashim;	state Exp;
branches;
next	1.6;

1.6
date	2015.08.25.13.36.46;	author nakashim;	state Exp;
branches;
next	1.5;

1.5
date	2015.08.25.11.04.22;	author nakashim;	state Exp;
branches;
next	1.4;

1.4
date	2015.08.24.06.02.10;	author nakashim;	state Exp;
branches;
next	1.3;

1.3
date	2015.08.22.04.49.22;	author nakashim;	state Exp;
branches;
next	1.2;

1.2
date	2015.08.15.15.03.22;	author nakashim;	state Exp;
branches;
next	1.1;

1.1
date	2015.07.21.05.44.37;	author nakashim;	state Exp;
branches;
next	;


desc
@@


1.13
log
@*** empty log message ***
@
text
@
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/csim/RCS/exec.c,v 1.12 2015/09/01 09:42:25 nakashim Exp nakashim $";

/* ARM Instruction Simulator           */
/*        Copyright (C) 2007 by NAIST. */
/*         Primary writer: Y.Nakashima */
/*                nakashim@@is.naist.jp */

/* exec.c 2005/3/22 */ 

#include "csim.h"

insn_exec(tid, rob) Uint tid; struct rob *rob;
{
  Uint cid = tid2cid(tid);
  Ull  s1, s2, cc;
  int  exec; /* 0:null 1:exec */

  if (rob->cond < 14)
    ex_srr(tid, NULL, &cc, rob, 5); /* CPSREG */
  else
    cc = 0; /* dummy */

  switch (rob->cond) {
  case 0: /* EQ (Z set) */
    if (cc & CC_Z) exec = 1;
    else           exec = 0;
    break;
  case 1:  /* NE (Z clear) */
    if (cc & CC_Z) exec = 0;
    else           exec = 1;
    break;
  case 2:  /* CS (C set) */
    if (cc & CC_C) exec = 1;
    else           exec = 0;
    break;
  case 3:  /* CC (C clear) */
    if (cc & CC_C) exec = 0;
    else           exec = 1;
    break;
  case 4:  /* MI (N set) */
    if (cc & CC_N) exec = 1;
    else           exec = 0;
    break;
  case 5:  /* PL (N clear) */
    if (cc & CC_N) exec = 0;
    else           exec = 1;
    break;
  case 6:  /* VS (V set) */
    if (cc & CC_V) exec = 1;
    else           exec = 0;
    break;
  case 7:  /* VC (V clear) */
    if (cc & CC_V) exec = 0;
    else           exec = 1;
    break;
  case 8:  /* HI (C=1&Z=0) */
    if ((cc & CC_C) && !(cc & CC_Z)) exec = 1;
    else                             exec = 0;
    break;
  case 9:  /* LS (C=0|Z=1) */
    if ((cc & CC_C) && !(cc & CC_Z)) exec = 0;
    else                             exec = 1;
    break;
  case 10: /* GE (N==V) */
    if (((cc & CC_N) && (cc & CC_V)) || (!(cc & CC_N) && !(cc & CC_V))) exec = 1;
    else                                                                exec = 0;
    break;
  case 11: /* LT (N!=V) */
    if (((cc & CC_N) && (cc & CC_V)) || (!(cc & CC_N) && !(cc & CC_V))) exec = 0;
    else                                                                exec = 1;
    break;
  case 12: /* GT (Z=0&N==V */
    if (!(cc & CC_Z) && (((cc & CC_N) && (cc & CC_V)) || (!(cc & CC_N) && !(cc & CC_V)))) exec = 1;
    else                                                                                  exec = 0;
    break;
  case 13: /* LE (Z=1|N!=V */
    if (!(cc & CC_Z) && (((cc & CC_N) && (cc & CC_V)) || (!(cc & CC_N) && !(cc & CC_V)))) exec = 0;
    else                                                                                  exec = 1;
    break;
  case 14: /* AL (Always) */
    exec = 1;
    break;
  case 15: /* AL (Always) */
    exec = 1;
    break;
  }

  switch (rob->type) {
  case 0: /* 0:ALU */
    rob->stat = insn_exec_alu(tid, rob);
    break;
  case 1: /* 1:MUL */
    rob->stat = insn_exec_mul(tid, rob);
    break;
  case 2: /* 2:VXX */
    rob->stat = insn_exec_vxx(tid, rob);
    break;
  case 3: /* 3:LD */
    rob->stat = insn_exec_ld(tid, rob);
    break;
  case 4: /* 4:ST */
    rob->stat = insn_exec_st(tid, rob);
    break;
  case 5: /* 5:BRANCH */
    switch (rob->opcd) {
    case 1: /* BL */
      ex_drw(tid, 0LL, (Ull)rob->pc+4, rob, 1);
    case 0: /* B */
      break;
    case 2: /* CBZ */
      ex_srr(tid, NULL, &s1, rob, 0);
      if (!rob->dbl)
	s1 &= 0x00000000ffffffffLL;
      if (s1 == 0LL) exec = 1;
      else           exec = 0;
      break;
    case 3:/* CBNZ */
      ex_srr(tid, NULL, &s1, rob, 0);
      if (!rob->dbl)
	s1 &= 0x00000000ffffffffLL;
      if (s1 != 0LL) exec = 1;
      else           exec = 0;
      break;
    case 4: /* TBZ */
      ex_srr(tid, NULL, &s1, rob, 0);
      ex_srr(tid, NULL, &s2, rob, 1);
      if (s1&(0x0000000000000001LL<<s2)) exec = 0;
      else                               exec = 1;
      break;
    case 5:/* TBNZ */
      ex_srr(tid, NULL, &s1, rob, 0);
      ex_srr(tid, NULL, &s2, rob, 1);
      if (s1&(0x0000000000000001LL<<s2)) exec = 1;
      else                               exec = 0;
      break;
    case 6:/* CALL(BLR) */
      ex_drw(tid, 0LL, (Ull)rob->pc+4, rob, 1);
    case 7:/* JMP/RET(BR) */
      ex_srr(tid, NULL, &(rob->target), rob, 0);
      rob->stat = ROB_RESTART; /* restart pipe */
      break;
    }
    if (exec && !rob->bpred) /* bpred miss taken */
      rob->stat = ROB_RESTART; /* restart pipe */
    else if (!exec && rob->bpred) { /* bpred miss not-taken */
      rob->target = rob->pc+4;
      rob->stat = ROB_RESTART; /* restart pipe */
    }
    else
      rob->stat = ROB_COMPLETE; /* empty */
    break;
  case 6: /* 6:SVC */
    rob->stat = ROB_RESTART; /* restart pipe */
    break;
  case 7: /* 7:PTHREAD */
    rob->stat = ROB_RESTART; /* restart pipe */
    break;
  }

  return (0);
}
@


1.12
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.11 2015/09/01 09:32:28 nakashim Exp nakashim $";
d11 1
a11 1
#include "bsim.h"
@


1.11
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.10 2015/09/01 08:04:13 nakashim Exp nakashim $";
d91 1
a91 1
    rob->stat = insn_exec_alu(tid, exec, rob);
d94 1
a94 1
    rob->stat = insn_exec_mul(tid, exec, rob);
d97 1
a97 1
    rob->stat = insn_exec_vxx(tid, exec, rob);
d100 1
a100 1
    rob->stat = insn_exec_ld(tid, exec, rob);
d103 1
a103 1
    rob->stat = insn_exec_st(tid, exec, rob);
d154 1
a154 4
    if (exec) /* taken */
      rob->stat = ROB_RESTART; /* restart pipe */
    else
      rob->stat = ROB_COMPLETE; /* empty */
d157 1
a157 4
    if (exec) /* taken */
      rob->stat = ROB_RESTART; /* restart pipe */
    else
      rob->stat = ROB_COMPLETE; /* empty */
@


1.10
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.9 2015/09/01 05:35:09 nakashim Exp nakashim $";
d20 1
a20 1
    cc = ex_srr(tid, rob, 5)>>60; /* CPSREG */
d112 1
a112 1
      s1 = ex_srr(tid, rob, 0);
d119 1
a119 1
      s1 = ex_srr(tid, rob, 0);
d126 2
a127 2
      s1 = ex_srr(tid, rob, 0);
      s2 = ex_srr(tid, rob, 1);
d132 2
a133 2
      s1 = ex_srr(tid, rob, 0);
      s2 = ex_srr(tid, rob, 1);
d140 1
a140 1
      rob->target = ex_srr(tid, rob, 0);
@


1.9
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.8 2015/08/29 14:21:33 nakashim Exp nakashim $";
d108 1
a108 1
      ex_drw(tid, (Ull)rob->pc+4, rob, 1);
d138 1
a138 1
      ex_drw(tid, (Ull)rob->pc+4, rob, 1);
@


1.8
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.7 2015/08/27 06:47:08 nakashim Exp nakashim $";
d20 1
a20 1
    cc = ex_srr(tid, rob, 8)>>60; /* CPSREG */
d127 1
a127 1
      s2 = ex_srr(tid, rob, 2);
d133 1
a133 1
      s2 = ex_srr(tid, rob, 2);
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.6 2015/08/25 13:36:46 nakashim Exp nakashim $";
d57 1
a57 1
  case 8:  /* HI (C=0&Z=0) */
d61 1
a61 1
  case 9:  /* LS (C=1|Z=1) */
@


1.6
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.5 2015/08/25 11:04:22 nakashim Exp nakashim $";
d16 1
a16 1
  Ull  s1, cc;
d125 13
a137 1
    case 4:/* CALL(BLR) */
d139 1
a139 1
    case 5:/* JMP/RET(BR) */
d153 1
a153 1
  case 6: /* 6:SWI */
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.4 2015/08/24 06:02:10 nakashim Exp nakashim $";
d21 2
d109 1
d124 7
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.3 2015/08/22 04:49:22 nakashim Exp nakashim $";
a20 2
  else
    cc = 0LL; /* for CBZ */
d104 2
a105 1
    if (rob->opcd==1) /* BL */
d107 2
a108 1
    else if (rob->opcd==2) { /* CBZ */
d114 2
a115 2
    }
    else if (rob->opcd==3) { /* CBNZ */
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.2 2015/08/15 15:03:22 nakashim Exp nakashim $";
d16 1
a16 1
  int  cc;
d21 2
d106 1
a106 1
    if (rob->opcd) /* BL */
d108 14
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm64/src/bsim/RCS/exec.c,v 1.1 2015/07/21 05:44:37 nakashim Exp nakashim $";
d20 1
a20 1
    cc = (Uint)ex_srr(tid, rob, 8)>>28; /* CPSREG */
d82 2
a83 2
  case 15: /* NV (-) */
    exec = 0;
a86 1
  /* ¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú¡ú */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char RcsHeader[] = "$Header: /usr/home/nakashim/proj-arm32/src/bsim/RCS/exec.c,v 1.9 2015/01/17 13:50:42 nakashim Exp nakashim $";
d106 1
a106 1
      ex_drw(tid, rob->pc+4, rob, 1);
@
